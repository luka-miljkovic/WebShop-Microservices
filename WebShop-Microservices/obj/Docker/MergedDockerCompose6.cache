name: dockercompose3480748212475598791
services:
  customerdb:
    container_name: customer-db
    environment:
      ACCEPT_EULA: "Y"
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 1433
      published: "8001"
      protocol: tcp
  customerservice:
    build:
      context: C:\Users\Teodora\Documents\GitHub\WebShop-Microservices\WebShop-Microservices
      dockerfile: CustomerService/Dockerfile
    container_name: customer-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_HOST: customerdb
      DB_NAME: dms_customer
      DB_SA_PASSWORD: pa55w0rd!
    image: customerservice
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 80
      published: "8002"
      protocol: tcp
  productdb:
    container_name: product-db
    environment:
      MYSQL_ROOT_PASSWORD: admin
    image: mysql:8.0.34-oracle
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 3306
      published: "8003"
      protocol: tcp
  productservice:
    build:
      context: C:\Users\Teodora\Documents\GitHub\WebShop-Microservices\WebShop-Microservices
      dockerfile: ProductService/Dockerfile
    container_name: product-service
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_HOST: productdb
      DB_NAME: dms_product
      DB_ROOT_PASSWORD: admin
    image: productservice
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 80
      published: "8004"
      protocol: tcp
networks:
  backend:
    name: dockercompose3480748212475598791_backend